# Example .configuration file that uses the
# Adafruit 160x128 tft color display
#
# This display requires the ESP32, and will not work with the 
#  ESP8266 (at least, not with released code) due to the lack
#  of adequate RAM.
#
substitutions:
  devicename: garage_display
  friendly_name: Garage Display
  device_description: Garage door state display by door

esphome:
  name: $devicename
  comment: ${device_description}
  platform: ESP32
  board: esp32doit-devkit-v1

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: !secret ap_ssid
    password: !secret ap_password

captive_portal:

# Enable logging
logger:

# Enable Home Assistant API
api:

ota:

spi:    # Use VSPI
  clk_pin: GPIO18
  mosi_pin: GPIO23
  miso_pin: GPIO19

sensor:
  - platform: uptime
    id: my_uptime

  - platform: wifi_signal
    update_interval: 60s
    id: my_wifi_signal

text_sensor:
  - platform: version
    id: my_version

time:
  - platform: homeassistant
    id: homeassistant_time

globals:
  - id: g1_button_time   # stores a timestamp of when the Garage 1 button was last pressed
    type: long
    restore_value: no
    initial_value: '0'
  - id: g2_button_time
    type: long
    restore_value: no
    initial_value: '0'
    
# These are sensors from Home Assistant that will be monitored
binary_sensor:
  - platform: homeassistant
    entity_id: binary_sensor.g1_isclosed
    id: garage1_closed
  - platform: homeassistant
    entity_id: binary_sensor.g2_isclosed
    id: garage2_closed
  - platform: homeassistant
    entity_id: binary_sensor.g1_ispressed
    id: garage1_pressed
    on_state:
      then:       # store the timestamp
        - lambda: |-
             id(g1_button_time) = id(homeassistant_time).now().timestamp;
  - platform: homeassistant
    entity_id: binary_sensor.g2_ispressed
    id: garage2_pressed
    on_state:
      then:
        - lambda: |-
             id(g2_button_time) = id(homeassistant_time).now().timestamp;

# Place this font file in the same folder as this .yaml file
font:
  - file: 'OpenSans-Regular.ttf'
    id: font1
    size: 10
  - file: 'OpenSans-Regular.ttf'
    id: font2
    size: 24

image:
  - file: "garage1_open.png"
    id: img_garage1_open
    type: RGB24
  - file: "garage1_closed.png"
    id: img_garage1_closed
    type: RGB24
  - file: "garage2_open.png"
    id: img_garage2_open
    type: RGB24
  - file: "garage2_closed.png"
    id: img_garage2_closed
    type: RGB24
  - file: "wifi0.png"
    id: wifi0
    type: RGB24
  - file: "wifi1.png"
    id: wifi1
    type: RGB24
  - file: "wifi2.png"
    id: wifi2
    type: RGB24
  - file: "wifi3.png"
    id: wifi3
    type: RGB24
 
display:
  - platform: st7735
    cs_pin: GPIO16   # These are arbitrarily chosen GPIOs
    dc_pin: GPIO17
    reset_pin: GPIO21
    rotation: 90     # Needed for landscape mode
    lambda: |-
      // Create the display for the Garage Monitor.
      // There will be open/closed door icon, an overall "Open" or "Closed" text,
      //   a timestamp of the last time the garage door was opened or closed (along
      //   with an indicator as to the reason - button press vs. remote), and
      //   a WiFi strength meter.
      //
      // Place the overall Open/Closed text
      if(id(garage1_closed).state && id(garage2_closed).state) {
         it.print(1, 5, id(font2), Color(0,255,0), "Garage Closed");
      } else {
         it.print(5, 5, id(font2), Color(255,0,0), "Garage Open");
      }
      
      // Place the open/closed icons (i.e. images)
      it.image(  4,44,id(garage1_closed).state ? id(img_garage1_closed) : id(img_garage1_open));
      it.image(100,44,id(garage2_closed).state ? id(img_garage2_closed) : id(img_garage2_open));
      
      // Display the WiFi signal strength
      float rssi = id(my_wifi_signal).state;
      it.image(150,0, (rssi<-85) ? id(wifi0) :
                      (rssi<-65) ? id(wifi1) :
                      (rssi<-50) ? id(wifi2) :
                                   id(wifi3));
      
      // Keep track of the last time a garage opened or closed, and display that time
      static int last_garage_state[2] = {0,0};
      static char garage_msg[2][8] = {"xx:xx", "xx:xx"};
      static int time_since_last_button[2] = {0,0};
      int current_garage_state[2] = {id(garage1_closed).state, id(garage2_closed).state};
      long last_garage_button_time[2] = {id(g1_button_time), id(g2_button_time)};
      auto time = id(homeassistant_time).now();
      for (int i = 0; i < 2; i++)
      {
         // Update the garage message with the current time, if state has changed
         if (last_garage_state[i] != current_garage_state[i]) {
            snprintf(garage_msg[i], 8, "%02d:%02d", time.hour, time.minute);
            // capture how long it has been since last button press - used below.
            time_since_last_button[i] = time.timestamp - last_garage_button_time[i];
            last_garage_state[i] = current_garage_state[i];
         }
         // Display the current garage message, regardless of any state change
         it.print(1, 104, id(font1), "When");
         it.print(39 + 76*i, 104, id(font1), garage_msg[i]);
         // Display the 'reason' for the last garage state change - i.e. button or remote.
         //   If button has been pressed in last 60 seconds, then assume the
         //   latest change was due to that button press.
         it.print(1, 117, id(font1), "How");
         it.print(35 + 73*i, 117, id(font1), time_since_last_button[i] > 60 ? "Remote" : "Button");
      }



status_led:
  pin:
    number: GPIO2
    inverted: False

